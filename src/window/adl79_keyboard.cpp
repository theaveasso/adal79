#include "adal79/window/adl79_keyboard.hpp"
#include "adal79/window/adl79_keycode.hpp"

namespace adl {
keyboard::keyboard() {
  m_inputs[adlk_UNKNOWN]              = input();
  m_inputs[adlk_RETURN]               = input();
  m_inputs[adlk_ESCAPE]               = input();
  m_inputs[adlk_BACKSPACE]            = input();
  m_inputs[adlk_TAB]                  = input();
  m_inputs[adlk_SPACE]                = input();
  m_inputs[adlk_EXCLAIM]              = input();
  m_inputs[adlk_DBLAPOSTROPHE]        = input();
  m_inputs[adlk_HASH]                 = input();
  m_inputs[adlk_DOLLAR]               = input();
  m_inputs[adlk_PERCENT]              = input();
  m_inputs[adlk_AMPERSAND]            = input();
  m_inputs[adlk_APOSTROPHE]           = input();
  m_inputs[adlk_LEFTPAREN]            = input();
  m_inputs[adlk_RIGHTPAREN]           = input();
  m_inputs[adlk_ASTERISK]             = input();
  m_inputs[adlk_PLUS]                 = input();
  m_inputs[adlk_COMMA]                = input();
  m_inputs[adlk_MINUS]                = input();
  m_inputs[adlk_PERIOD]               = input();
  m_inputs[adlk_SLASH]                = input();
  m_inputs[adlk_0]                    = input();
  m_inputs[adlk_1]                    = input();
  m_inputs[adlk_2]                    = input();
  m_inputs[adlk_3]                    = input();
  m_inputs[adlk_4]                    = input();
  m_inputs[adlk_5]                    = input();
  m_inputs[adlk_6]                    = input();
  m_inputs[adlk_7]                    = input();
  m_inputs[adlk_8]                    = input();
  m_inputs[adlk_9]                    = input();
  m_inputs[adlk_COLON]                = input();
  m_inputs[adlk_SEMICOLON]            = input();
  m_inputs[adlk_LESS]                 = input();
  m_inputs[adlk_EQUALS]               = input();
  m_inputs[adlk_GREATER]              = input();
  m_inputs[adlk_QUESTION]             = input();
  m_inputs[adlk_AT]                   = input();
  m_inputs[adlk_LEFTBRACKET]          = input();
  m_inputs[adlk_BACKSLASH]            = input();
  m_inputs[adlk_RIGHTBRACKET]         = input();
  m_inputs[adlk_CARET]                = input();
  m_inputs[adlk_UNDERSCORE]           = input();
  m_inputs[adlk_GRAVE]                = input();
  m_inputs[adlk_A]                    = input();
  m_inputs[adlk_B]                    = input();
  m_inputs[adlk_C]                    = input();
  m_inputs[adlk_D]                    = input();
  m_inputs[adlk_E]                    = input();
  m_inputs[adlk_F]                    = input();
  m_inputs[adlk_G]                    = input();
  m_inputs[adlk_H]                    = input();
  m_inputs[adlk_I]                    = input();
  m_inputs[adlk_J]                    = input();
  m_inputs[adlk_K]                    = input();
  m_inputs[adlk_L]                    = input();
  m_inputs[adlk_M]                    = input();
  m_inputs[adlk_N]                    = input();
  m_inputs[adlk_O]                    = input();
  m_inputs[adlk_P]                    = input();
  m_inputs[adlk_Q]                    = input();
  m_inputs[adlk_R]                    = input();
  m_inputs[adlk_S]                    = input();
  m_inputs[adlk_T]                    = input();
  m_inputs[adlk_U]                    = input();
  m_inputs[adlk_V]                    = input();
  m_inputs[adlk_W]                    = input();
  m_inputs[adlk_X]                    = input();
  m_inputs[adlk_Y]                    = input();
  m_inputs[adlk_Z]                    = input();
  m_inputs[adlk_LEFTBRACE]            = input();
  m_inputs[adlk_PIPE]                 = input();
  m_inputs[adlk_RIGHTBRACE]           = input();
  m_inputs[adlk_TILDE]                = input();
  m_inputs[adlk_DELETE]               = input();
  m_inputs[adlk_PLUSMINUS]            = input();
  m_inputs[adlk_CAPSLOCK]             = input();
  m_inputs[adlk_F1]                   = input();
  m_inputs[adlk_F2]                   = input();
  m_inputs[adlk_F3]                   = input();
  m_inputs[adlk_F4]                   = input();
  m_inputs[adlk_F5]                   = input();
  m_inputs[adlk_F6]                   = input();
  m_inputs[adlk_F7]                   = input();
  m_inputs[adlk_F8]                   = input();
  m_inputs[adlk_F9]                   = input();
  m_inputs[adlk_F10]                  = input();
  m_inputs[adlk_F11]                  = input();
  m_inputs[adlk_F12]                  = input();
  m_inputs[adlk_PRINTSCREEN]          = input();
  m_inputs[adlk_SCROLLLOCK]           = input();
  m_inputs[adlk_PAUSE]                = input();
  m_inputs[adlk_INSERT]               = input();
  m_inputs[adlk_HOME]                 = input();
  m_inputs[adlk_PAGEUP]               = input();
  m_inputs[adlk_END]                  = input();
  m_inputs[adlk_PAGEDOWN]             = input();
  m_inputs[adlk_RIGHT]                = input();
  m_inputs[adlk_LEFT]                 = input();
  m_inputs[adlk_DOWN]                 = input();
  m_inputs[adlk_UP]                   = input();
  m_inputs[adlk_NUMLOCKCLEAR]         = input();
  m_inputs[adlk_KP_DIVIDE]            = input();
  m_inputs[adlk_KP_MULTIPLY]          = input();
  m_inputs[adlk_KP_MINUS]             = input();
  m_inputs[adlk_KP_PLUS]              = input();
  m_inputs[adlk_KP_ENTER]             = input();
  m_inputs[adlk_KP_1]                 = input();
  m_inputs[adlk_KP_2]                 = input();
  m_inputs[adlk_KP_3]                 = input();
  m_inputs[adlk_KP_4]                 = input();
  m_inputs[adlk_KP_5]                 = input();
  m_inputs[adlk_KP_6]                 = input();
  m_inputs[adlk_KP_7]                 = input();
  m_inputs[adlk_KP_8]                 = input();
  m_inputs[adlk_KP_9]                 = input();
  m_inputs[adlk_KP_0]                 = input();
  m_inputs[adlk_KP_PERIOD]            = input();
  m_inputs[adlk_APPLICATION]          = input();
  m_inputs[adlk_POWER]                = input();
  m_inputs[adlk_KP_EQUALS]            = input();
  m_inputs[adlk_F13]                  = input();
  m_inputs[adlk_F14]                  = input();
  m_inputs[adlk_F15]                  = input();
  m_inputs[adlk_F16]                  = input();
  m_inputs[adlk_F17]                  = input();
  m_inputs[adlk_F18]                  = input();
  m_inputs[adlk_F19]                  = input();
  m_inputs[adlk_F20]                  = input();
  m_inputs[adlk_F21]                  = input();
  m_inputs[adlk_F22]                  = input();
  m_inputs[adlk_F23]                  = input();
  m_inputs[adlk_F24]                  = input();
  m_inputs[adlk_EXECUTE]              = input();
  m_inputs[adlk_HELP]                 = input();
  m_inputs[adlk_MENU]                 = input();
  m_inputs[adlk_SELECT]               = input();
  m_inputs[adlk_STOP]                 = input();
  m_inputs[adlk_AGAIN]                = input();
  m_inputs[adlk_UNDO]                 = input();
  m_inputs[adlk_CUT]                  = input();
  m_inputs[adlk_COPY]                 = input();
  m_inputs[adlk_PASTE]                = input();
  m_inputs[adlk_FIND]                 = input();
  m_inputs[adlk_MUTE]                 = input();
  m_inputs[adlk_VOLUMEUP]             = input();
  m_inputs[adlk_VOLUMEDOWN]           = input();
  m_inputs[adlk_KP_COMMA]             = input();
  m_inputs[adlk_KP_EQUALSAS400]       = input();
  m_inputs[adlk_ALTERASE]             = input();
  m_inputs[adlk_SYSREQ]               = input();
  m_inputs[adlk_CANCEL]               = input();
  m_inputs[adlk_CLEAR]                = input();
  m_inputs[adlk_PRIOR]                = input();
  m_inputs[adlk_RETURN2]              = input();
  m_inputs[adlk_SEPARATOR]            = input();
  m_inputs[adlk_OUT]                  = input();
  m_inputs[adlk_OPER]                 = input();
  m_inputs[adlk_CLEARAGAIN]           = input();
  m_inputs[adlk_CRSEL]                = input();
  m_inputs[adlk_EXSEL]                = input();
  m_inputs[adlk_KP_00]                = input();
  m_inputs[adlk_KP_000]               = input();
  m_inputs[adlk_THOUSANDSSEPARATOR]   = input();
  m_inputs[adlk_DECIMALSEPARATOR]     = input();
  m_inputs[adlk_CURRENCYUNIT]         = input();
  m_inputs[adlk_CURRENCYSUBUNIT]      = input();
  m_inputs[adlk_KP_LEFTPAREN]         = input();
  m_inputs[adlk_KP_RIGHTPAREN]        = input();
  m_inputs[adlk_KP_LEFTBRACE]         = input();
  m_inputs[adlk_KP_RIGHTBRACE]        = input();
  m_inputs[adlk_KP_TAB]               = input();
  m_inputs[adlk_KP_BACKSPACE]         = input();
  m_inputs[adlk_KP_A]                 = input();
  m_inputs[adlk_KP_B]                 = input();
  m_inputs[adlk_KP_C]                 = input();
  m_inputs[adlk_KP_D]                 = input();
  m_inputs[adlk_KP_E]                 = input();
  m_inputs[adlk_KP_F]                 = input();
  m_inputs[adlk_KP_XOR]               = input();
  m_inputs[adlk_KP_POWER]             = input();
  m_inputs[adlk_KP_PERCENT]           = input();
  m_inputs[adlk_KP_LESS]              = input();
  m_inputs[adlk_KP_GREATER]           = input();
  m_inputs[adlk_KP_AMPERSAND]         = input();
  m_inputs[adlk_KP_DBLAMPERSAND]      = input();
  m_inputs[adlk_KP_VERTICALBAR]       = input();
  m_inputs[adlk_KP_DBLVERTICALBAR]    = input();
  m_inputs[adlk_KP_COLON]             = input();
  m_inputs[adlk_KP_HASH]              = input();
  m_inputs[adlk_KP_SPACE]             = input();
  m_inputs[adlk_KP_AT]                = input();
  m_inputs[adlk_KP_EXCLAM]            = input();
  m_inputs[adlk_KP_MEMSTORE]          = input();
  m_inputs[adlk_KP_MEMRECALL]         = input();
  m_inputs[adlk_KP_MEMCLEAR]          = input();
  m_inputs[adlk_KP_MEMADD]            = input();
  m_inputs[adlk_KP_MEMSUBTRACT]       = input();
  m_inputs[adlk_KP_MEMMULTIPLY]       = input();
  m_inputs[adlk_KP_MEMDIVIDE]         = input();
  m_inputs[adlk_KP_PLUSMINUS]         = input();
  m_inputs[adlk_KP_CLEAR]             = input();
  m_inputs[adlk_KP_CLEARENTRY]        = input();
  m_inputs[adlk_KP_BINARY]            = input();
  m_inputs[adlk_KP_OCTAL]             = input();
  m_inputs[adlk_KP_DECIMAL]           = input();
  m_inputs[adlk_KP_HEXADECIMAL]       = input();
  m_inputs[adlk_LCTRL]                = input();
  m_inputs[adlk_LSHIFT]               = input();
  m_inputs[adlk_LALT]                 = input();
  m_inputs[adlk_LGUI]                 = input();
  m_inputs[adlk_RCTRL]                = input();
  m_inputs[adlk_RSHIFT]               = input();
  m_inputs[adlk_RALT]                 = input();
  m_inputs[adlk_RGUI]                 = input();
  m_inputs[adlk_MODE]                 = input();
  m_inputs[adlk_SLEEP]                = input();
  m_inputs[adlk_WAKE]                 = input();
  m_inputs[adlk_CHANNEL_INCREMENT]    = input();
  m_inputs[adlk_CHANNEL_DECREMENT]    = input();
  m_inputs[adlk_MEDIA_PLAY]           = input();
  m_inputs[adlk_MEDIA_PAUSE]          = input();
  m_inputs[adlk_MEDIA_RECORD]         = input();
  m_inputs[adlk_MEDIA_FAST_FORWARD]   = input();
  m_inputs[adlk_MEDIA_REWIND]         = input();
  m_inputs[adlk_MEDIA_NEXT_TRACK]     = input();
  m_inputs[adlk_MEDIA_PREVIOUS_TRACK] = input();
  m_inputs[adlk_MEDIA_STOP]           = input();
  m_inputs[adlk_MEDIA_EJECT]          = input();
  m_inputs[adlk_MEDIA_PLAY_PAUSE]     = input();
  m_inputs[adlk_MEDIA_SELECT]         = input();
  m_inputs[adlk_AC_NEW]               = input();
  m_inputs[adlk_AC_OPEN]              = input();
  m_inputs[adlk_AC_CLOSE]             = input();
  m_inputs[adlk_AC_EXIT]              = input();
  m_inputs[adlk_AC_SAVE]              = input();
  m_inputs[adlk_AC_PRINT]             = input();
  m_inputs[adlk_AC_PROPERTIES]        = input();
  m_inputs[adlk_AC_SEARCH]            = input();
  m_inputs[adlk_AC_HOME]              = input();
  m_inputs[adlk_AC_BACK]              = input();
  m_inputs[adlk_AC_FORWARD]           = input();
  m_inputs[adlk_AC_STOP]              = input();
  m_inputs[adlk_AC_REFRESH]           = input();
  m_inputs[adlk_AC_BOOKMARKS]         = input();
  m_inputs[adlk_SOFTLEFT]             = input();
  m_inputs[adlk_SOFTRIGHT]            = input();
  m_inputs[adlk_CALL]                 = input();
  m_inputs[adlk_ENDCALL]              = input();
  m_inputs[adlk_LEFT_TAB]             = input();
  m_inputs[adlk_LEVEL5_SHIFT]         = input();
  m_inputs[adlk_MULTI_KEY_COMPOSE]    = input();
  m_inputs[adlk_LMETA]                = input();
  m_inputs[adlk_RMETA]                = input();
  m_inputs[adlk_LHYPER]               = input();
  m_inputs[adlk_RHYPER]               = input();
}

} // namespace adl
